import heapq

class Node:
    def _init_(self, state, parent, action, cost):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost

def actions(state):
    blank_space = state.index(0)
    actions = []
    if blank_space not in [0, 1, 2]:
        actions.append("Up")
    if blank_space not in [6, 7, 8]:
        actions.append("Down")
    if blank_space not in [0, 3, 6]:
        actions.append("Left")
    if blank_space not in [2, 5, 8]:
        actions.append("Right")
    return actions

def result(state, action):
    blank_space = state.index(0)
    if action == "Up":
        blank_space_new = blank_space - 3
    elif action == "Down":
        blank_space_new = blank_space + 3
    elif action == "Left":
        blank_space_new = blank_space - 1
    elif action == "Right":
        blank_space_new = blank_space + 1
    new_state = state.copy()
    new_state[blank_space], new_state[blank_space_new] = new_state[blank_space_new], new_state[blank_space]
    return new_state

def manhattan_distance(state):
    distance = 0
    for i in range(8):
        if state[i] != 0:
            current_x = i % 3
            current_y = i // 3
            goal_x = (state[i] - 1) % 3
            goal_y = (state[i] - 1) // 3
            distance += abs(current_x - goal_x) + abs(current_y - goal_y)
    return distance

def astar(start_state, goal_state):
    heap = []
    heapq.heappush(heap, (manhattan_distance(start_state), Node(start_state, None, None, 0)))
    visited = set()
    while heap:
        _, current = heapq.heappop(heap)
        if current.state == goal_state:
            return current
        visited.add(tuple(current.state))
        for action in actions(current.state):
            new_state = result(current.state, action)
            if tuple(new_state) not in visited:
                new_node = Node(new_state, current, action, current.cost + 1)
                heapq.heappush(heap, (new_node.cost + manhattan_distance(new_state), new_node))

# Example usage
start_state = [1, 2, 3, 4, 0, 5, 6, 7, 8]
