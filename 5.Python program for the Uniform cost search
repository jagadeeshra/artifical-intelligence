import heapq

def uniform_cost_search(problem):
    frontier = PriorityQueue() # using a priority queue to sort the nodes by cost
    frontier.append(Node(problem.initial_state, None, None, 0))
    explored = set()

    while frontier:
        node = frontier.pop()
        if problem.goal_test(node.state):
            return node
        explored.add(node.state)
        for child in problem.expand(node):
            if child.state not in explored:
                frontier.append(child)

    return None

class PriorityQueue:
    def _init_(self):
        self.elements = []

    def empty(self):
        return len(self.elements) == 0

    def append(self, item):
        heapq.heappush(self.elements, (item.path_cost, item))

    def pop(self):
        return heapq.heappop(self.elements)[1]

class Node:
    def _init_(self, state, parent, action, path_cost):
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
